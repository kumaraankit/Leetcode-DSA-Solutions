class Solution {
public:
    bool isAnagram(string s, string t) {
        // take constant time
        if(s.size()!=t.size()) return false;
      unordered_map<char,int> sMap;
      unordered_map<char,int> tMap;  

    // Takes O(n) times 
      for(int i=0;i<s.size();i++){
        sMap[s[i]]++;
        tMap[t[i]]++;
      }
     
     // takes O(n) times to iterate and check for every entry
      for(int i=0;i<sMap.size();i++){
        if(sMap[i]!=tMap[i]) return false;
      }
          return true;
    }

};

// Overall time complexity is O(n)
// Space complexity is also O(n) as in worst case all charactcers can be unique 
// so hashmap will store unique n characters
